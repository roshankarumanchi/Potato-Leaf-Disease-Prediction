APP CODE 
# Import necessary libraries 
import numpy as np 
import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn.ensemble import RandomForestClassifier 
from sklearn.metrics import accuracy_score 
# Load the dataset (sample data) 
data = pd.read_csv("potato_disease_data.csv") 
# Data preprocessing 
X = data.drop("Disease", axis=1) 
y = data["Disease"] 
# Split the data into training and testing sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) 
# Create and train the disease prediction model 
model = RandomForestClassifier() 
model.fit(X_train, y_train) 
# Make predictions 
y_pred = model.predict(X_test) 
# Calculate accuracy 
accuracy = accuracy_score(y_test, y_pred) 
# Print the accuracy 
print(f"Model Accuracy: {accuracy * 100:.2f}%") 
# User input for prediction 
user_input = np.array([[<feature_values>]]) # Replace <feature_values> with actual values 
prediction = model.predict(user_input) 
# Display the prediction 
print(f"Predicted Disease: {prediction[0]}") 
Machine learning module code 
# Import necessary libraries 
import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn.ensemble import RandomForestClassifier 
from sklearn.metrics import accuracy_score, classification_report 
# Load your dataset (replace 'dataset.csv' with your dataset file) 
data = pd.read_csv('dataset.csv') 
# Split the dataset into features (X) and target (y) 
X = data.drop('DiseaseLabel', axis=1) # Replace 'DiseaseLabel' with the actual target column 
y = data['DiseaseLabel'] 
# Split the data into training and testing sets 
 35 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) 
# Initialize a machine learning model (Random Forest Classifier in this example) 
model = RandomForestClassifier(n_estimators=100, random_state=42) 
# Train the model on the training data 
model.fit(X_train, y_train) 
# Make predictions on the test data 
y_pred = model.predict(X_test) 
# Evaluate the model's performance 
accuracy = accuracy_score(y_test, y_pred) 
report = classification_report(y_test, y_pred) 
# Print the results 
print(f'Accuracy: {accuracy}') 
print('Classification Report:\n', report) 
# You can now use this trained model for potato leaf disease prediction.
